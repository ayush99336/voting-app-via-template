/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedInitializeCandidateInstruction,
  type ParsedInitializePollInstruction,
  type ParsedVoteInstruction,
} from '../instructions';

export const VOTINGDAPP_PROGRAM_ADDRESS =
  'M93Hz8r6aaDDP7J5iKdJb3ZWrcE2RCJ8P8rFyPV6rvU' as Address<'M93Hz8r6aaDDP7J5iKdJb3ZWrcE2RCJ8P8rFyPV6rvU'>;

export enum VotingdappAccount {
  Candidate,
  Poll,
}

export function identifyVotingdappAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): VotingdappAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([86, 69, 250, 96, 193, 10, 222, 123])
      ),
      0
    )
  ) {
    return VotingdappAccount.Candidate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([110, 234, 167, 188, 231, 136, 153, 111])
      ),
      0
    )
  ) {
    return VotingdappAccount.Poll;
  }
  throw new Error(
    'The provided account could not be identified as a votingdapp account.'
  );
}

export enum VotingdappInstruction {
  InitializeCandidate,
  InitializePoll,
  Vote,
}

export function identifyVotingdappInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): VotingdappInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([210, 107, 118, 204, 255, 97, 112, 26])
      ),
      0
    )
  ) {
    return VotingdappInstruction.InitializeCandidate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([193, 22, 99, 197, 18, 33, 115, 117])
      ),
      0
    )
  ) {
    return VotingdappInstruction.InitializePoll;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([227, 110, 155, 23, 136, 126, 172, 25])
      ),
      0
    )
  ) {
    return VotingdappInstruction.Vote;
  }
  throw new Error(
    'The provided instruction could not be identified as a votingdapp instruction.'
  );
}

export type ParsedVotingdappInstruction<
  TProgram extends string = 'M93Hz8r6aaDDP7J5iKdJb3ZWrcE2RCJ8P8rFyPV6rvU',
> =
  | ({
      instructionType: VotingdappInstruction.InitializeCandidate;
    } & ParsedInitializeCandidateInstruction<TProgram>)
  | ({
      instructionType: VotingdappInstruction.InitializePoll;
    } & ParsedInitializePollInstruction<TProgram>)
  | ({
      instructionType: VotingdappInstruction.Vote;
    } & ParsedVoteInstruction<TProgram>);
