/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { VOTINGDAPP_PROGRAM_ADDRESS } from '../programs';

/** PollNotStarted:  */
export const VOTINGDAPP_ERROR__POLL_NOT_STARTED = 0x1770; // 6000
/** PollEnded:  */
export const VOTINGDAPP_ERROR__POLL_ENDED = 0x1771; // 6001

export type VotingdappError =
  | typeof VOTINGDAPP_ERROR__POLL_ENDED
  | typeof VOTINGDAPP_ERROR__POLL_NOT_STARTED;

let votingdappErrorMessages: Record<VotingdappError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  votingdappErrorMessages = {
    [VOTINGDAPP_ERROR__POLL_ENDED]: ``,
    [VOTINGDAPP_ERROR__POLL_NOT_STARTED]: ``,
  };
}

export function getVotingdappErrorMessage(code: VotingdappError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (votingdappErrorMessages as Record<VotingdappError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isVotingdappError<TProgramErrorCode extends VotingdappError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    VOTINGDAPP_PROGRAM_ADDRESS,
    code
  );
}
